/* ===========================================
   1. UPDATE Book.php CLASS - Add Archive Methods
   =========================================== */

// Add these methods to your Book.php class:

/**
 * Create archived_books table if it doesn't exist
 */
private function createArchivedBooksTable() {
    try {
        $sql = "CREATE TABLE IF NOT EXISTS archived_books (
            id INT AUTO_INCREMENT PRIMARY KEY,
            original_id INT NOT NULL,
            title VARCHAR(255) NOT NULL,
            author VARCHAR(255) NOT NULL,
            isbn VARCHAR(50) DEFAULT NULL,
            category VARCHAR(100) NOT NULL,
            quantity INT NOT NULL DEFAULT 1,
            description TEXT DEFAULT NULL,
            subject_name VARCHAR(255) DEFAULT NULL,
            semester VARCHAR(50) DEFAULT NULL,
            section VARCHAR(50) DEFAULT NULL,
            year_level VARCHAR(50) DEFAULT NULL,
            course_code VARCHAR(100) DEFAULT NULL,
            publication_year INT(4) DEFAULT NULL,
            book_copy_number INT DEFAULT NULL,
            total_quantity INT DEFAULT NULL,
            is_multi_record TINYINT(1) DEFAULT 0,
            same_book_series TINYINT(1) DEFAULT 0,
            original_created_at TIMESTAMP NULL,
            original_updated_at TIMESTAMP NULL,
            archived_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            archive_reason VARCHAR(255) DEFAULT 'Automatic archiving - 10+ years old',
            archived_by VARCHAR(100) DEFAULT 'System',
            INDEX idx_original_id (original_id),
            INDEX idx_category (category),
            INDEX idx_publication_year (publication_year),
            INDEX idx_archived_at (archived_at)
        )";
        $this->pdo->exec($sql);
        return true;
    } catch (PDOException $e) {
        error_log("Error creating archived_books table: " . $e->getMessage());
        return false;
    }
}

/**
 * Check if a book should be automatically archived based on publication year
 */
private function shouldAutoArchive($publicationYear) {
    if (!$publicationYear) {
        return false; // Don't archive books without publication year
    }
    
    $currentYear = date('Y');
    $cutoffYear = $currentYear - 10;
    
    return $publicationYear <= $cutoffYear;
}

/**
 * Archive a book automatically
 */
private function autoArchiveBook($bookData, $bookId) {
    try {
        // Create archive table if it doesn't exist
        $this->createArchivedBooksTable();
        
        // Insert into archived_books
        $sql = "INSERT INTO archived_books (
            original_id, title, author, isbn, category, quantity, description, 
            subject_name, semester, section, year_level, course_code, publication_year,
            book_copy_number, total_quantity, is_multi_record, same_book_series,
            original_created_at, original_updated_at, archived_at, archive_reason, archived_by
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW(), NOW(), ?, ?)";
        
        $stmt = $this->pdo->prepare($sql);
        $result = $stmt->execute([
            $bookId,
            $bookData['title'],
            $bookData['author'],
            $bookData['isbn'] ?? '',
            $bookData['category'],
            $bookData['quantity'] ?? 1,
            $bookData['description'] ?? '',
            $bookData['subject_name'] ?? '',
            $bookData['semester'] ?? '',
            $bookData['section'] ?? '',
            $bookData['year_level'] ?? '',
            $bookData['course_code'] ?? '',
            $bookData['publication_year'] ?? null,
            $bookData['book_copy_number'] ?? null,
            $bookData['total_quantity'] ?? null,
            $bookData['is_multi_record'] ?? 0,
            $bookData['same_book_series'] ?? 0,
            'Automatic archiving - Publication year 10+ years old',
            'System'
        ]);
        
        if ($result) {
            // Log the auto-archive activity
            $this->logger->logBookActivity(
                'auto_archive',
                ['id' => $bookId, 'title' => $bookData['title'], 'category' => $bookData['category']],
                "Auto-archived due to publication year: " . ($bookData['publication_year'] ?? 'unknown')
            );
            
            return true;
        }
        
        return false;
    } catch (PDOException $e) {
        error_log("Auto archive failed: " . $e->getMessage());
        return false;
    }
}

/**
 * Enhanced addBook method with automatic archiving
 */
public function addBook($data) {
    try {
        if (empty($data['title']) || empty($data['author']) || empty($data['category'])) {
            return false;
        }
        
        // Check if this book should be auto-archived
        $shouldArchive = $this->shouldAutoArchive($data['publication_year'] ?? null);
        
        if ($shouldArchive) {
            // Create archive table if needed
            $this->createArchivedBooksTable();
            
            // Add directly to archive instead of main table
            $result = $this->autoArchiveBook($data, 0); // 0 as placeholder for original_id
            
            if ($result) {
                $this->logger->logBookActivity(
                    'add_archived',
                    ['title' => $data['title'], 'category' => $data['category']],
                    "Book added directly to archive - Publication year: " . ($data['publication_year'] ?? 'unknown')
                );
                
                return 'archived'; // Special return value to indicate archived
            }
            
            return false;
        }
        
        // Normal book addition (not old enough for archive)
        $stmt = $this->pdo->prepare("INSERT INTO books (title, author, isbn, category, quantity, description, subject_name, semester, section, year_level, course_code, publication_year, book_copy_number, total_quantity, is_multi_record, same_book_series) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
        $result = $stmt->execute([
            $data['title'],
            $data['author'],
            $data['isbn'] ?? '',
            $data['category'],
            $data['quantity'] ?? 1,
            $data['description'] ?? '',
            $data['subject_name'] ?? '',
            $data['semester'] ?? '',
            $data['section'] ?? '',
            $data['year_level'] ?? '',
            $data['course_code'] ?? '',
            $data['publication_year'] ?? null,
            $data['book_copy_number'] ?? null,
            $data['total_quantity'] ?? null,
            $data['is_multi_record'] ?? 0,
            $data['same_book_series'] ?? 0
        ]);
        
        if ($result) {
            $bookId = $this->pdo->lastInsertId();
            
            // Log the activity
            $additionalInfo = "Quantity: {$data['quantity']}, Author: {$data['author']}";
            if (!empty($data['publication_year'])) {
                $additionalInfo .= ", Published: {$data['publication_year']}";
            }
            
            $this->logger->logBookActivity(
                'add',
                ['id' => $bookId, 'title' => $data['title'], 'category' => $data['category']],
                $additionalInfo
            );
            
            return $bookId;
        }
        
        return false;
    } catch (PDOException $e) {
        error_log("Error in addBook: " . $e->getMessage());
        return false;
    }
}

/**
 * Get archive statistics
 */
public function getArchiveStats() {
    try {
        $this->createArchivedBooksTable();
        
        $stats = [];
        
        // Total archived books
        $stmt = $this->pdo->query("SELECT COUNT(*) as total FROM archived_books");
        $stats['total_archived'] = $stmt->fetch()['total'] ?? 0;
        
        // Books eligible for archiving
        $currentYear = date('Y');
        $cutoffYear = $currentYear - 10;
        $stmt = $this->pdo->prepare("SELECT COUNT(*) as eligible FROM books WHERE publication_year IS NOT NULL AND publication_year <= ?");
        $stmt->execute([$cutoffYear]);
        $stats['eligible_for_archive'] = $stmt->fetch()['eligible'] ?? 0;
        
        return $stats;
    } catch (PDOException $e) {
        error_log("Error getting archive stats: " . $e->getMessage());
        return ['total_archived' => 0, 'eligible_for_archive' => 0];
    }
}

/* ===========================================
   2. UPDATE add-book.php - Handle Archive Response
   =========================================== */

// In add-book.php, modify the form submission handling:

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // ... existing code for handling form data ...
    
    // Create book records
    $archivedCount = 0;
    $activeCount = 0;
    
    for ($i = 0; $i < $total_quantity; $i++) {
        // ... existing ISBN logic ...
        
        // Create combinations for each selected option for this book copy
        foreach ($categories as $category) {
            foreach ($year_levels as $year_level) {
                foreach ($semesters as $semester) {
                    foreach ($sections as $section) {
                        $data = [
                            'title' => $_POST['title'],
                            'author' => $_POST['author'],
                            'isbn' => $current_isbn,
                            'category' => $category,
                            'quantity' => 1,
                            'description' => $_POST['description'],
                            'subject_name' => $_POST['subject_name'] ?? '',
                            'semester' => $semester,
                            'section' => $section,
                            'year_level' => $year_level,
                            'course_code' => $_POST['course_code'] ?? '',
                            'publication_year' => $_POST['publication_year'] ?? null,
                            'book_copy_number' => $i + 1,
                            'total_quantity' => $total_quantity,
                            'is_multi_record' => ($total_combinations > 1) ? 1 : 0,
                            'same_book_series' => $same_book ? 1 : 0
                        ];
                        
                        $result = $book->addBook($data);
                        
                        if ($result === 'archived') {
                            $archivedCount++;
                        } elseif ($result) {
                            $activeCount++;
                        } else {
                            $error_count++;
                        }
                    }
                }
            }
        }
    }
    
    if ($activeCount > 0 || $archivedCount > 0) {
        $book_type = $same_book ? "copies of the same book" : "individual books";
        
        if ($archivedCount > 0 && $activeCount > 0) {
            $total_books_message = "Successfully added {$activeCount} {$book_type} to active collection and {$archivedCount} to archives (10+ years old)!";
        } elseif ($archivedCount > 0) {
            $total_books_message = "Successfully added {$archivedCount} {$book_type} to archives (books are 10+ years old)!";
        } else {
            $total_books_message = "Successfully added {$activeCount} {$book_type} to active collection!";
        }
        
        $_SESSION['message'] = $total_books_message;
        $_SESSION['message_type'] = 'success';
        
        if ($error_count > 0) {
            $_SESSION['message'] .= " ({$error_count} failed)";
        }
        
        header('Location: books.php');
        exit;
    } else {
        $error_message = 'Failed to add book. Please try again.';
    }
}

/* ===========================================
   3. UPDATE books.php - Include Archive Stats
   =========================================== */

// In books.php, add archive stats to the main page:

// Add this after the existing book counts calculation:
$archiveStats = $book->getArchiveStats();

// Add this to the Quick Stats section (replace existing stats):
<div class="container">
    <div class="card bg-light" style="max-width: 1200px; margin: 0 auto;">
        <div class="card-body text-center">
            <div class="row justify-content-center">
                <div class="col-md-2 col-6">
                    <h3 class="text-primary"><?php echo array_sum($bookCounts); ?></h3>
                    <p class="mb-0 text-muted">Active Books</p>
                </div>
                <div class="col-md-2 col-6">
                    <h3 class="text-secondary"><?php echo $archiveStats['total_archived']; ?></h3>
                    <p class="mb-0 text-muted">Archived Books</p>
                </div>
                <div class="col-md-2 col-6">
                    <h3 class="text-warning"><?php echo $archiveStats['eligible_for_archive']; ?></h3>
                    <p class="mb-0 text-muted">Need Archive</p>
                </div>
                <div class="col-md-2 col-6">
                    <h3 class="text-success"><?php echo count($departments); ?></h3>
                    <p class="mb-0 text-muted">Departments</p>
                </div>
                <div class="col-md-2 col-6">
                    <h3 class="text-info">24/7</h3>
                    <p class="mb-0 text-muted">Digital Access</p>
                </div>
                <div class="col-md-2 col-6">
                    <a href="add-book.php" class="btn btn-primary btn-lg">
                        <i class="fas fa-plus me-1"></i>Add New Book
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

/* ===========================================
   4. ADD Archive Notification Component
   =========================================== */

// Add this notification system to books.php (after the stats section):

<?php if ($archiveStats['eligible_for_archive'] > 0): ?>
    <div class="container mt-3">
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <div class="d-flex align-items-center">
                <i class="fas fa-archive fa-2x me-3"></i>
                <div class="flex-grow-1">
                    <h6 class="alert-heading mb-1">Archive Notification</h6>
                    <p class="mb-2">
                        <strong><?php echo $archiveStats['eligible_for_archive']; ?> books</strong> 
                        are eligible for archiving (published before <?php echo date('Y') - 10; ?>).
                    </p>
                    <a href="archives.php" class="btn btn-warning btn-sm me-2">
                        <i class="fas fa-eye me-1"></i>View Eligible Books
                    </a>
                    <a href="archives.php?tab=eligible" class="btn btn-outline-warning btn-sm">
                        <i class="fas fa-archive me-1"></i>Manage Archives
                    </a>
                </div>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    </div>
<?php endif; ?>

/* ===========================================
   5. ADD JavaScript for Archive Warnings
   =========================================== */

// Add this JavaScript to add-book.php for publication year warnings:

<script>
// Enhanced publication year validation with archive warning
document.getElementById('publicationYear').addEventListener('input', function() {
    const year = parseInt(this.value);
    const currentYear = new Date().getFullYear();
    const cutoffYear = currentYear - 10;
    
    // Remove existing messages
    let existingMsg = this.parentNode.querySelector('.year-validation');
    if (existingMsg) {
        existingMsg.remove();
    }
    
    if (this.value && (year < 1800 || year > 2030)) {
        const errorMsg = document.createElement('small');
        errorMsg.className = 'text-danger year-validation';
        errorMsg.innerHTML = '<i class="fas fa-exclamation-triangle me-1"></i>Year must be between 1800 and 2030';
        this.parentNode.appendChild(errorMsg);
        this.classList.add('is-invalid');
    } else if (this.value && year <= cutoffYear) {
        const archiveMsg = document.createElement('small');
        archiveMsg.className = 'text-warning year-validation';
        archiveMsg.innerHTML = `<i class="fas fa-archive me-1"></i>Books from ${year} will be automatically archived (10+ years old)`;
        this.parentNode.appendChild(archiveMsg);
        this.classList.remove('is-invalid');
        this.classList.add('is-valid');
    } else if (this.value && year > currentYear) {
        const futureMsg = document.createElement('small');
        futureMsg.className = 'text-info year-validation';
        futureMsg.innerHTML = '<i class="fas fa-info-circle me-1"></i>Future publication year detected';
        this.parentNode.appendChild(futureMsg);
        this.classList.remove('is-invalid');
        this.classList.add('is-valid');
    } else if (this.value) {
        this.classList.remove('is-invalid');
        this.classList.add('is-valid');
    } else {
        this.classList.remove('is-invalid', 'is-valid');
    }
});

// Archive preview in form preview
function updatePreviewWithArchiveInfo() {
    const publicationYear = document.getElementById('publicationYear').value;
    const currentYear = new Date().getFullYear();
    const cutoffYear = currentYear - 10;
    
    if (publicationYear && parseInt(publicationYear) <= cutoffYear) {
        const previewInfo = document.querySelector('#previewSection .alert-info small');
        if (previewInfo) {
            previewInfo.innerHTML += '<br><span class="text-warning"><i class="fas fa-archive me-1"></i><strong>Note:</strong> These books will be automatically archived due to publication year</span>';
        }
    }
}

// Call this function in the existing preview functionality
document.getElementById('previewBtn').addEventListener('click', function() {
    // ... existing preview code ...
    
    // Add archive info to preview
    setTimeout(updatePreviewWithArchiveInfo, 100);
});
</script>

/* ===========================================
   SUMMARY OF CHANGES NEEDED:
   =========================================== */

/*
1. Book.php:
   - Add createArchivedBooksTable() method
   - Add shouldAutoArchive() method  
   - Add autoArchiveBook() method
   - Update addBook() to check for auto-archive
   - Add getArchiveStats() method

2. add-book.php:
   - Update form submission to handle archived vs active books
   - Add JavaScript warnings for old publication years
   - Enhance preview to show archive notifications

3. books.php:
   - Add archive stats to dashboard
   - Add notification for books eligible for archiving
   - Update quick stats to include archive information

4. Database:
   - archived_books table will be created automatically
   - No manual SQL changes needed

This system will:
- Automatically detect books 10+ years old during addition
- Move old books directly to archive instead of active collection
- Provide clear warnings and notifications
- Maintain all existing functionality for newer books
*/